// Code generated by Prisma (prisma@1.23.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  visit: (where?: VisitWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  visit: (where: VisitWhereUniqueInput) => VisitPromise;
  visits: (
    args?: {
      where?: VisitWhereInput;
      orderBy?: VisitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Visit>;
  visitsConnection: (
    args?: {
      where?: VisitWhereInput;
      orderBy?: VisitOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VisitConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createVisit: (data: VisitCreateInput) => VisitPromise;
  updateVisit: (
    args: { data: VisitUpdateInput; where: VisitWhereUniqueInput }
  ) => VisitPromise;
  updateManyVisits: (
    args: { data: VisitUpdateManyMutationInput; where?: VisitWhereInput }
  ) => BatchPayloadPromise;
  upsertVisit: (
    args: {
      where: VisitWhereUniqueInput;
      create: VisitCreateInput;
      update: VisitUpdateInput;
    }
  ) => VisitPromise;
  deleteVisit: (where: VisitWhereUniqueInput) => VisitPromise;
  deleteManyVisits: (where?: VisitWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  visit: (
    where?: VisitSubscriptionWhereInput
  ) => VisitSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type VisitOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "count_ASC"
  | "count_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type VisitWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VisitWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  count?: Int;
  count_not?: Int;
  count_in?: Int[] | Int;
  count_not_in?: Int[] | Int;
  count_lt?: Int;
  count_lte?: Int;
  count_gt?: Int;
  count_gte?: Int;
  AND?: VisitWhereInput[] | VisitWhereInput;
  OR?: VisitWhereInput[] | VisitWhereInput;
  NOT?: VisitWhereInput[] | VisitWhereInput;
}

export interface VisitCreateInput {
  count: Int;
}

export interface VisitUpdateInput {
  count?: Int;
}

export interface VisitUpdateManyMutationInput {
  count?: Int;
}

export interface VisitSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VisitWhereInput;
  AND?: VisitSubscriptionWhereInput[] | VisitSubscriptionWhereInput;
  OR?: VisitSubscriptionWhereInput[] | VisitSubscriptionWhereInput;
  NOT?: VisitSubscriptionWhereInput[] | VisitSubscriptionWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Visit {
  id: ID_Output;
  count: Int;
}

export interface VisitPromise extends Promise<Visit>, Fragmentable {
  id: () => Promise<ID_Output>;
  count: () => Promise<Int>;
}

export interface VisitSubscription
  extends Promise<AsyncIterator<Visit>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VisitConnection {
  pageInfo: PageInfo;
  edges: VisitEdge[];
}

export interface VisitConnectionPromise
  extends Promise<VisitConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VisitEdge>>() => T;
  aggregate: <T = AggregateVisitPromise>() => T;
}

export interface VisitConnectionSubscription
  extends Promise<AsyncIterator<VisitConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VisitEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVisitSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface VisitEdge {
  node: Visit;
  cursor: String;
}

export interface VisitEdgePromise extends Promise<VisitEdge>, Fragmentable {
  node: <T = VisitPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VisitEdgeSubscription
  extends Promise<AsyncIterator<VisitEdge>>,
    Fragmentable {
  node: <T = VisitSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVisit {
  count: Int;
}

export interface AggregateVisitPromise
  extends Promise<AggregateVisit>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVisitSubscription
  extends Promise<AsyncIterator<AggregateVisit>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VisitSubscriptionPayload {
  mutation: MutationType;
  node: Visit;
  updatedFields: String[];
  previousValues: VisitPreviousValues;
}

export interface VisitSubscriptionPayloadPromise
  extends Promise<VisitSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VisitPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VisitPreviousValuesPromise>() => T;
}

export interface VisitSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VisitSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VisitSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VisitPreviousValuesSubscription>() => T;
}

export interface VisitPreviousValues {
  id: ID_Output;
  count: Int;
}

export interface VisitPreviousValuesPromise
  extends Promise<VisitPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  count: () => Promise<Int>;
}

export interface VisitPreviousValuesSubscription
  extends Promise<AsyncIterator<VisitPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Visit",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
